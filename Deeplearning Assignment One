{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/prasanth3316/GUMMADI_VENKATA_PRASANTH-CLEANCODE_TASK/blob/master/Deeplearning%20Assignment%20One\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "dPJ9d6jRtHuk",
        "outputId": "72bbdf4f-0133-478c-c715-24e8a4332ffd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<bound method NDFrame.describe of       avgAnnCount  avgDeathsPerYear  TARGET_deathRate  incidenceRate  \\\n",
            "0     1397.000000               469             164.9     489.800000   \n",
            "1      173.000000                70             161.3     411.600000   \n",
            "2      102.000000                50             174.7     349.700000   \n",
            "3      427.000000               202             194.8     430.400000   \n",
            "4       57.000000                26             144.4     350.100000   \n",
            "...           ...               ...               ...            ...   \n",
            "3042  1962.667684                15             149.6     453.549422   \n",
            "3043  1962.667684                43             150.1     453.549422   \n",
            "3044  1962.667684                46             153.9     453.549422   \n",
            "3045  1962.667684                52             175.0     453.549422   \n",
            "3046  1962.667684                48             213.6     453.549422   \n",
            "\n",
            "      medIncome  popEst2015  povertyPercent  studyPerCap           binnedInc  \\\n",
            "0         61898      260131            11.2   499.748204   (61494.5, 125635]   \n",
            "1         48127       43269            18.6    23.111234  (48021.6, 51046.4]   \n",
            "2         49348       21026            14.6    47.560164  (48021.6, 51046.4]   \n",
            "3         44243       75882            17.1   342.637253    (42724.4, 45201]   \n",
            "4         49955       10321            12.5     0.000000  (48021.6, 51046.4]   \n",
            "...         ...         ...             ...          ...                 ...   \n",
            "3042      46961        6343            12.4     0.000000    (45201, 48021.6]   \n",
            "3043      48609       37118            18.8   377.175494  (48021.6, 51046.4]   \n",
            "3044      51144       34536            15.0  1968.959926  (51046.4, 54545.6]   \n",
            "3045      50745       25609            13.3     0.000000  (48021.6, 51046.4]   \n",
            "3046      41193       37030            13.9     0.000000  (40362.7, 42724.4]   \n",
            "\n",
            "      MedianAge  ...  PctPrivateCoverageAlone  PctEmpPrivCoverage  \\\n",
            "0          39.3  ...                      NaN                41.6   \n",
            "1          33.0  ...                     53.8                43.6   \n",
            "2          45.0  ...                     43.5                34.9   \n",
            "3          42.8  ...                     40.3                35.0   \n",
            "4          48.3  ...                     43.9                35.1   \n",
            "...         ...  ...                      ...                 ...   \n",
            "3042       44.2  ...                     54.9                44.6   \n",
            "3043       30.4  ...                     53.3                48.6   \n",
            "3044       30.9  ...                     52.6                47.8   \n",
            "3045       39.0  ...                     56.3                49.6   \n",
            "3046       26.2  ...                     60.3                22.9   \n",
            "\n",
            "     PctPublicCoverage  PctPublicCoverageAlone   PctWhite   PctBlack  \\\n",
            "0                 32.9                    14.0  81.780529   2.594728   \n",
            "1                 31.1                    15.3  89.228509   0.969102   \n",
            "2                 42.1                    21.1  90.922190   0.739673   \n",
            "3                 45.3                    25.0  91.744686   0.782626   \n",
            "4                 44.0                    22.7  94.104024   0.270192   \n",
            "...                ...                     ...        ...        ...   \n",
            "3042              31.7                    13.2  90.280811   3.837754   \n",
            "3043              28.8                    17.7  75.706245   2.326771   \n",
            "3044              26.6                    16.8  87.961629   2.313188   \n",
            "3045              29.5                    14.0  92.905681   1.176562   \n",
            "3046              25.1                    12.6  70.098132  16.590100   \n",
            "\n",
            "      PctAsian  PctOtherRace  PctMarriedHouseholds  BirthRate  \n",
            "0     4.821857      1.843479             52.856076   6.118831  \n",
            "1     2.246233      3.741352             45.372500   4.333096  \n",
            "2     0.465898      2.747358             54.444868   3.729488  \n",
            "3     1.161359      1.362643             51.021514   4.603841  \n",
            "4     0.665830      0.492135             54.027460   6.796657  \n",
            "...        ...           ...                   ...        ...  \n",
            "3042  0.327613      1.700468             51.063830   7.773512  \n",
            "3043  4.044920     14.130288             52.007937   8.186470  \n",
            "3044  1.316472      5.680705             55.153949   7.809192  \n",
            "3045  0.244632      2.131790             58.484232   7.582938  \n",
            "3046  3.177753      1.356457             56.040242   8.981723  \n",
            "\n",
            "[3047 rows x 34 columns]>\n",
            "(3047, 34)\n",
            "avgAnnCount                                             6.0\n",
            "avgDeathsPerYear                                          3\n",
            "TARGET_deathRate                                       59.7\n",
            "incidenceRate                                         201.3\n",
            "medIncome                                             22640\n",
            "popEst2015                                              827\n",
            "povertyPercent                                          3.2\n",
            "studyPerCap                                             0.0\n",
            "binnedInc                                (34218.1, 37413.8]\n",
            "MedianAge                                              22.3\n",
            "MedianAgeMale                                          22.4\n",
            "MedianAgeFemale                                        22.3\n",
            "Geography                  Abbeville County, South Carolina\n",
            "AvgHouseholdSize                                     0.0221\n",
            "PercentMarried                                         23.1\n",
            "PctNoHS18_24                                            0.0\n",
            "PctHS18_24                                              0.0\n",
            "PctSomeCol18_24                                         7.1\n",
            "PctBachDeg18_24                                         0.0\n",
            "PctHS25_Over                                            7.5\n",
            "PctBachDeg25_Over                                       2.5\n",
            "PctEmployed16_Over                                     17.6\n",
            "PctUnemployed16_Over                                    0.4\n",
            "PctPrivateCoverage                                     22.3\n",
            "PctPrivateCoverageAlone                                15.7\n",
            "PctEmpPrivCoverage                                     13.5\n",
            "PctPublicCoverage                                      11.2\n",
            "PctPublicCoverageAlone                                  2.6\n",
            "PctWhite                                          10.199155\n",
            "PctBlack                                                0.0\n",
            "PctAsian                                                0.0\n",
            "PctOtherRace                                            0.0\n",
            "PctMarriedHouseholds                               22.99249\n",
            "BirthRate                                               0.0\n",
            "dtype: object avgAnnCount                             38150.0\n",
            "avgDeathsPerYear                          14010\n",
            "TARGET_deathRate                          362.8\n",
            "incidenceRate                            1206.9\n",
            "medIncome                                125635\n",
            "popEst2015                             10170292\n",
            "povertyPercent                             47.4\n",
            "studyPerCap                         9762.308998\n",
            "binnedInc                      [22640, 34218.1]\n",
            "MedianAge                                 624.0\n",
            "MedianAgeMale                              64.7\n",
            "MedianAgeFemale                            65.7\n",
            "Geography                  Zavala County, Texas\n",
            "AvgHouseholdSize                           3.97\n",
            "PercentMarried                             72.5\n",
            "PctNoHS18_24                               64.1\n",
            "PctHS18_24                                 72.5\n",
            "PctSomeCol18_24                            79.0\n",
            "PctBachDeg18_24                            51.8\n",
            "PctHS25_Over                               54.8\n",
            "PctBachDeg25_Over                          42.2\n",
            "PctEmployed16_Over                         80.1\n",
            "PctUnemployed16_Over                       29.4\n",
            "PctPrivateCoverage                         92.3\n",
            "PctPrivateCoverageAlone                    78.9\n",
            "PctEmpPrivCoverage                         70.7\n",
            "PctPublicCoverage                          65.1\n",
            "PctPublicCoverageAlone                     46.6\n",
            "PctWhite                                  100.0\n",
            "PctBlack                              85.947799\n",
            "PctAsian                              42.619425\n",
            "PctOtherRace                          41.930251\n",
            "PctMarriedHouseholds                  78.075397\n",
            "BirthRate                             21.326165\n",
            "dtype: object\n",
            "34\n",
            "avgAnnCount                float64\n",
            "avgDeathsPerYear             int64\n",
            "TARGET_deathRate           float64\n",
            "incidenceRate              float64\n",
            "medIncome                    int64\n",
            "popEst2015                   int64\n",
            "povertyPercent             float64\n",
            "studyPerCap                float64\n",
            "binnedInc                   object\n",
            "MedianAge                  float64\n",
            "MedianAgeMale              float64\n",
            "MedianAgeFemale            float64\n",
            "Geography                   object\n",
            "AvgHouseholdSize           float64\n",
            "PercentMarried             float64\n",
            "PctNoHS18_24               float64\n",
            "PctHS18_24                 float64\n",
            "PctSomeCol18_24            float64\n",
            "PctBachDeg18_24            float64\n",
            "PctHS25_Over               float64\n",
            "PctBachDeg25_Over          float64\n",
            "PctEmployed16_Over         float64\n",
            "PctUnemployed16_Over       float64\n",
            "PctPrivateCoverage         float64\n",
            "PctPrivateCoverageAlone    float64\n",
            "PctEmpPrivCoverage         float64\n",
            "PctPublicCoverage          float64\n",
            "PctPublicCoverageAlone     float64\n",
            "PctWhite                   float64\n",
            "PctBlack                   float64\n",
            "PctAsian                   float64\n",
            "PctOtherRace               float64\n",
            "PctMarriedHouseholds       float64\n",
            "BirthRate                  float64\n",
            "dtype: object\n",
            "avgAnnCount                   0\n",
            "avgDeathsPerYear              0\n",
            "TARGET_deathRate              0\n",
            "incidenceRate                 0\n",
            "medIncome                     0\n",
            "popEst2015                    0\n",
            "povertyPercent                0\n",
            "studyPerCap                   0\n",
            "binnedInc                     0\n",
            "MedianAge                     0\n",
            "MedianAgeMale                 0\n",
            "MedianAgeFemale               0\n",
            "Geography                     0\n",
            "AvgHouseholdSize              0\n",
            "PercentMarried                0\n",
            "PctNoHS18_24                  0\n",
            "PctHS18_24                    0\n",
            "PctSomeCol18_24            2285\n",
            "PctBachDeg18_24               0\n",
            "PctHS25_Over                  0\n",
            "PctBachDeg25_Over             0\n",
            "PctEmployed16_Over          152\n",
            "PctUnemployed16_Over          0\n",
            "PctPrivateCoverage            0\n",
            "PctPrivateCoverageAlone     609\n",
            "PctEmpPrivCoverage            0\n",
            "PctPublicCoverage             0\n",
            "PctPublicCoverageAlone        0\n",
            "PctWhite                      0\n",
            "PctBlack                      0\n",
            "PctAsian                      0\n",
            "PctOtherRace                  0\n",
            "PctMarriedHouseholds          0\n",
            "BirthRate                     0\n",
            "dtype: int64\n",
            "Index(['avgAnnCount', 'avgDeathsPerYear', 'TARGET_deathRate', 'incidenceRate',\n",
            "       'medIncome', 'popEst2015', 'povertyPercent', 'studyPerCap', 'MedianAge',\n",
            "       'MedianAgeMale', 'MedianAgeFemale', 'AvgHouseholdSize',\n",
            "       'PercentMarried', 'PctNoHS18_24', 'PctHS18_24', 'PctBachDeg18_24',\n",
            "       'PctHS25_Over', 'PctBachDeg25_Over', 'PctUnemployed16_Over',\n",
            "       'PctPrivateCoverage', 'PctEmpPrivCoverage', 'PctPublicCoverage',\n",
            "       'PctPublicCoverageAlone', 'PctWhite', 'PctBlack', 'PctAsian',\n",
            "       'PctOtherRace', 'PctMarriedHouseholds', 'BirthRate'],\n",
            "      dtype='object')\n",
            "0.5168073272638145\n",
            "Testing Mean Squared Error: 0.524636867739456\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "\"from sklearn.feature_selection import mutual_info_regression\\nmi=mutual_info_regression(X_train_tensor,y_train_tensor)\\nseries=pd.Series(mi,index=X.columns).sort_values(ascending=False)\\n#Show the top 10 most important features\\nplt.figure(figsize=(10,5))\\nplt.style.use('ggplot')\\nseries.head(10).plot(kind='bar')\\nplt.show()\\nprint(series)\""
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torch.utils.data import DataLoader, TensorDataset\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import pandas as pd\n",
        "from sklearn.linear_model import LinearRegression\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.metrics import r2_score\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "\n",
        "#loading data from csv with latin-1 encoding\n",
        "data = pd.read_csv('/content/cancer_reg.csv',encoding='latin-1')\n",
        "\n",
        "#describe Data\n",
        "print(data.describe)\n",
        "print(data.shape)\n",
        "\n",
        "\n",
        "#Which problem will this dataset try to address?\n",
        "\n",
        "#The dataset aims to predict cancer mortality rates based on various features.\n",
        "\n",
        "#What is the minimum value and the maximum value in the dataset?\n",
        "\n",
        "print(data.min(),data.max())\n",
        "print(data.shape[1])\n",
        "\n",
        "print(data.dtypes)\n",
        "#check for null values\n",
        "print(data.isna().sum())\n",
        "\n",
        "#fill null with mean\n",
        "data['PctSomeCol18_24'] = data['PctSomeCol18_24'].fillna(data['PctSomeCol18_24'].mean())\n",
        "data['PctEmployed16_Over'] = data['PctEmployed16_Over'].fillna(data['PctEmployed16_Over'].mean())\n",
        "data['PctPrivateCoverageAlone'] = data['PctPrivateCoverageAlone'].fillna(data['PctPrivateCoverageAlone'].mean())\n",
        "\n",
        "#drop values which impacts less\n",
        "data = data.drop(columns=['Geography','binnedInc','PctSomeCol18_24','PctEmployed16_Over','PctPrivateCoverageAlone'])\n",
        "num_col = data.columns\n",
        "print(num_col)\n",
        "\n",
        "# # Splitting Features and Labels\n",
        "# X = data.drop('TARGET_deathRate', axis=1)  # Features\n",
        "# y = data['TARGET_deathRate']               # Target\n",
        "\n",
        "\n",
        "\n",
        "#Normalize\n",
        "scaler = StandardScaler()\n",
        "data[num_col] = scaler.fit_transform(data[num_col])\n",
        "\n",
        "\n",
        "feature_cols = num_col\n",
        "X =data.drop('TARGET_deathRate', axis=1)\n",
        "y = data['TARGET_deathRate']\n",
        "\n",
        "'''series=['PctBachDeg25_Over',\n",
        "'PctHS25_Over',\n",
        "'PctPublicCoverageAlone',\n",
        "'povertyPercent',\n",
        "'studyPerCap',\n",
        "'medIncome',\n",
        "'incidenceRate',\n",
        "'avgAnnCount',\n",
        "'PctPrivateCoverage',\n",
        "'avgDeathsPerYear'\n",
        "\n",
        "]'''\n",
        "#X=data[series]\n",
        "\n",
        "\n",
        "#split the datset\n",
        "'''\n",
        "Original Dataset: 100%\n",
        "Training Set: 80%\n",
        "Validation Set: 10%\n",
        "Test Set: 10%\n",
        "'''\n",
        "\n",
        "X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)\n",
        "\n",
        "X_train_tensor = torch.tensor(X_train.values, dtype=torch.float32)\n",
        "y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32).view(-1, 1)\n",
        "\n",
        "X_val_tensor = torch.tensor(X_val.values, dtype=torch.float32)\n",
        "y_val_tensor = torch.tensor(y_val.values, dtype=torch.float32).view(-1, 1)\n",
        "\n",
        "X_test_tensor = torch.tensor(X_test.values, dtype=torch.float32)\n",
        "y_test_tensor = torch.tensor(y_test.values, dtype=torch.float32).view(-1, 1)\n",
        "\n",
        "\n",
        "#implementing linear regression\n",
        "lr=LinearRegression()\n",
        "lr.fit(X_train,y_train) #training the model\n",
        "prediction=lr.predict(X_test)\n",
        "\n",
        "r2 = r2_score(y_test_tensor, prediction)\n",
        "print(r2)\n",
        "\n",
        "# Calculate metrics for testing data\n",
        "test_mse = mean_squared_error(y_test, prediction)\n",
        "\n",
        "print(f\"Testing Mean Squared Error: {test_mse}\")\n",
        "\n",
        "\n",
        "#\n",
        "'''from sklearn.feature_selection import mutual_info_regression\n",
        "mi=mutual_info_regression(X_train_tensor,y_train_tensor)\n",
        "series=pd.Series(mi,index=X.columns).sort_values(ascending=False)\n",
        "#Show the top 10 most important features\n",
        "plt.figure(figsize=(10,5))\n",
        "plt.style.use('ggplot')\n",
        "series.head(10).plot(kind='bar')\n",
        "plt.show()\n",
        "print(series)'''\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "wbrjsIFfDymP",
        "outputId": "f34fe18c-ed65-4b14-8b7f-e6c0d5222803"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 3ms/step - loss: 0.9528 - r2_score: -0.0400 - val_loss: 0.5557 - val_r2_score: 0.4648\n",
            "Epoch 2/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 2ms/step - loss: 0.4694 - r2_score: 0.5120 - val_loss: 0.5980 - val_r2_score: 0.4241\n",
            "Epoch 3/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 3ms/step - loss: 0.5022 - r2_score: 0.5148 - val_loss: 0.5413 - val_r2_score: 0.4787\n",
            "Epoch 4/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.4604 - r2_score: 0.5562 - val_loss: 0.5403 - val_r2_score: 0.4796\n",
            "Epoch 5/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 2ms/step - loss: 0.4112 - r2_score: 0.5851 - val_loss: 0.5166 - val_r2_score: 0.5024\n",
            "Epoch 6/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.4392 - r2_score: 0.5562 - val_loss: 0.5201 - val_r2_score: 0.4991\n",
            "Epoch 7/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - loss: 0.4305 - r2_score: 0.5489 - val_loss: 0.5283 - val_r2_score: 0.4912\n",
            "Epoch 8/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.4487 - r2_score: 0.5205 - val_loss: 0.5386 - val_r2_score: 0.4813\n",
            "Epoch 9/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 3ms/step - loss: 0.4165 - r2_score: 0.5802 - val_loss: 0.5025 - val_r2_score: 0.5161\n",
            "Epoch 10/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 4ms/step - loss: 0.4091 - r2_score: 0.6009 - val_loss: 0.5117 - val_r2_score: 0.5072\n",
            "Epoch 11/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 2ms/step - loss: 0.3915 - r2_score: 0.5849 - val_loss: 0.4854 - val_r2_score: 0.5325\n",
            "Epoch 12/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - loss: 0.3877 - r2_score: 0.5974 - val_loss: 0.5371 - val_r2_score: 0.4827\n",
            "Epoch 13/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - loss: 0.3704 - r2_score: 0.6285 - val_loss: 0.4905 - val_r2_score: 0.5276\n",
            "Epoch 14/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 2ms/step - loss: 0.3886 - r2_score: 0.6085 - val_loss: 0.5254 - val_r2_score: 0.4939\n",
            "Epoch 15/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - loss: 0.4128 - r2_score: 0.6016 - val_loss: 0.4988 - val_r2_score: 0.5196\n",
            "Epoch 16/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - loss: 0.4133 - r2_score: 0.5816 - val_loss: 0.4995 - val_r2_score: 0.5189\n",
            "Epoch 17/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 0.3773 - r2_score: 0.6236 - val_loss: 0.5065 - val_r2_score: 0.5122\n",
            "Epoch 18/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.3913 - r2_score: 0.6021 - val_loss: 0.5126 - val_r2_score: 0.5063\n",
            "Epoch 19/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 3ms/step - loss: 0.3775 - r2_score: 0.6199 - val_loss: 0.5060 - val_r2_score: 0.5126\n",
            "Epoch 20/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.3706 - r2_score: 0.5848 - val_loss: 0.4976 - val_r2_score: 0.5208\n",
            "Epoch 21/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - loss: 0.3736 - r2_score: 0.6231 - val_loss: 0.5076 - val_r2_score: 0.5112\n",
            "Epoch 22/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 2ms/step - loss: 0.3531 - r2_score: 0.6095 - val_loss: 0.5243 - val_r2_score: 0.4951\n",
            "Epoch 23/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - loss: 0.3758 - r2_score: 0.6239 - val_loss: 0.5044 - val_r2_score: 0.5142\n",
            "Epoch 24/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 0.3644 - r2_score: 0.6114 - val_loss: 0.4959 - val_r2_score: 0.5223\n",
            "Epoch 25/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 0.3849 - r2_score: 0.6176 - val_loss: 0.4966 - val_r2_score: 0.5217\n",
            "\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.5379 - r2_score: 0.5245  \n",
            "Architecture: DNN-16 with learning rate 0.1 Test Loss (MSE): [0.5500079989433289, 0.4934404492378235]\n",
            "\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step \n",
            "Architecture: DNN-16 with learning rate 0.1 R² score: 0.4934404083425912\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 0.8004 - r2_score: 0.1648 - val_loss: 0.5889 - val_r2_score: 0.4328\n",
            "Epoch 2/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 0.4695 - r2_score: 0.4981 - val_loss: 0.5455 - val_r2_score: 0.4746\n",
            "Epoch 3/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step - loss: 0.4603 - r2_score: 0.5635 - val_loss: 0.5100 - val_r2_score: 0.5088\n",
            "Epoch 4/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 2ms/step - loss: 0.4535 - r2_score: 0.5360 - val_loss: 0.5405 - val_r2_score: 0.4794\n",
            "Epoch 5/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 0.4372 - r2_score: 0.5087 - val_loss: 0.5520 - val_r2_score: 0.4683\n",
            "Epoch 6/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.4383 - r2_score: 0.5428 - val_loss: 0.5124 - val_r2_score: 0.5065\n",
            "Epoch 7/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.4281 - r2_score: 0.5749 - val_loss: 0.5153 - val_r2_score: 0.5037\n",
            "Epoch 8/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 3ms/step - loss: 0.4109 - r2_score: 0.5442 - val_loss: 0.4990 - val_r2_score: 0.5194\n",
            "Epoch 9/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 2ms/step - loss: 0.3946 - r2_score: 0.5944 - val_loss: 0.5242 - val_r2_score: 0.4951\n",
            "Epoch 10/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - loss: 0.4006 - r2_score: 0.5751 - val_loss: 0.5045 - val_r2_score: 0.5141\n",
            "Epoch 11/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.3664 - r2_score: 0.6000 - val_loss: 0.5074 - val_r2_score: 0.5113\n",
            "Epoch 12/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 0.3975 - r2_score: 0.6108 - val_loss: 0.4863 - val_r2_score: 0.5316\n",
            "Epoch 13/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.3958 - r2_score: 0.5835 - val_loss: 0.5153 - val_r2_score: 0.5037\n",
            "Epoch 14/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.3858 - r2_score: 0.5918 - val_loss: 0.4942 - val_r2_score: 0.5240\n",
            "Epoch 15/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - loss: 0.3986 - r2_score: 0.5780 - val_loss: 0.5193 - val_r2_score: 0.4999\n",
            "Epoch 16/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.3805 - r2_score: 0.6016 - val_loss: 0.5174 - val_r2_score: 0.5017\n",
            "Epoch 17/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 0.3724 - r2_score: 0.6080 - val_loss: 0.5143 - val_r2_score: 0.5047\n",
            "Epoch 18/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.3669 - r2_score: 0.6108 - val_loss: 0.4908 - val_r2_score: 0.5273\n",
            "Epoch 19/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.3932 - r2_score: 0.6048 - val_loss: 0.5068 - val_r2_score: 0.5119\n",
            "Epoch 20/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - loss: 0.3700 - r2_score: 0.6337 - val_loss: 0.5288 - val_r2_score: 0.4907\n",
            "Epoch 21/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.3859 - r2_score: 0.6132 - val_loss: 0.5065 - val_r2_score: 0.5122\n",
            "Epoch 22/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.3915 - r2_score: 0.5908 - val_loss: 0.4851 - val_r2_score: 0.5328\n",
            "Epoch 23/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 0.3743 - r2_score: 0.6164 - val_loss: 0.5222 - val_r2_score: 0.4970\n",
            "Epoch 24/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.3557 - r2_score: 0.6391 - val_loss: 0.5306 - val_r2_score: 0.4890\n",
            "Epoch 25/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - loss: 0.3935 - r2_score: 0.5739 - val_loss: 0.5116 - val_r2_score: 0.5072\n",
            "\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.5367 - r2_score: 0.5223  \n",
            "Architecture: DNN-16 with learning rate 0.01 Test Loss (MSE): [0.5220850110054016, 0.5191575884819031]\n",
            "\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step\n",
            "Architecture: DNN-16 with learning rate 0.01 R² score: 0.5191575733172304\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 1.2274 - r2_score: -0.3350 - val_loss: 0.5672 - val_r2_score: 0.4537\n",
            "Epoch 2/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - loss: 0.4582 - r2_score: 0.5310 - val_loss: 0.5735 - val_r2_score: 0.4476\n",
            "Epoch 3/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 3ms/step - loss: 0.4815 - r2_score: 0.5052 - val_loss: 0.5647 - val_r2_score: 0.4561\n",
            "Epoch 4/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - loss: 0.4744 - r2_score: 0.5424 - val_loss: 0.4959 - val_r2_score: 0.5223\n",
            "Epoch 5/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - loss: 0.4329 - r2_score: 0.5618 - val_loss: 0.5018 - val_r2_score: 0.5167\n",
            "Epoch 6/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.4189 - r2_score: 0.5234 - val_loss: 0.5333 - val_r2_score: 0.4864\n",
            "Epoch 7/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 0.4400 - r2_score: 0.5633 - val_loss: 0.5178 - val_r2_score: 0.5013\n",
            "Epoch 8/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.4131 - r2_score: 0.5833 - val_loss: 0.5009 - val_r2_score: 0.5176\n",
            "Epoch 9/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.4174 - r2_score: 0.5727 - val_loss: 0.5153 - val_r2_score: 0.5037\n",
            "Epoch 10/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - loss: 0.4565 - r2_score: 0.4360 - val_loss: 0.5061 - val_r2_score: 0.5126\n",
            "Epoch 11/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 2ms/step - loss: 0.3958 - r2_score: 0.5944 - val_loss: 0.5596 - val_r2_score: 0.4611\n",
            "Epoch 12/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - loss: 0.3976 - r2_score: 0.6020 - val_loss: 0.5074 - val_r2_score: 0.5113\n",
            "Epoch 13/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 2ms/step - loss: 0.3872 - r2_score: 0.5751 - val_loss: 0.4996 - val_r2_score: 0.5189\n",
            "Epoch 14/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 0.4171 - r2_score: 0.5740 - val_loss: 0.4902 - val_r2_score: 0.5278\n",
            "Epoch 15/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step - loss: 0.4078 - r2_score: 0.5975 - val_loss: 0.4769 - val_r2_score: 0.5406\n",
            "Epoch 16/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.3808 - r2_score: 0.6103 - val_loss: 0.5043 - val_r2_score: 0.5143\n",
            "Epoch 17/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 0.3679 - r2_score: 0.6098 - val_loss: 0.4980 - val_r2_score: 0.5203\n",
            "Epoch 18/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - loss: 0.3602 - r2_score: 0.6300 - val_loss: 0.5034 - val_r2_score: 0.5152\n",
            "Epoch 19/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 0.3916 - r2_score: 0.6058 - val_loss: 0.5110 - val_r2_score: 0.5078\n",
            "Epoch 20/25\n",
            "\u001b[1m2437/2437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - loss: 0.3582 - r2_score: 0.6308 - val_loss: 0.4943 - val_r2_score: 0.5239\n",
            "Epoch 21/25\n"
          ]
        }
      ],
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "from keras.callbacks import EarlyStopping\n",
        "from keras.optimizers import Adam\n",
        "\n",
        "\n",
        "lr=[0.1,0.01,0.001,0.0001]\n",
        "arch={'DNN-16':[16],'DNN-30-8':[30,8],'DNN-30-16-8':[30,16,8],'DNN-30-16-8-4':[30,16,8,4],'DNN-128-30-16-8-4':[128,30,16,8,4]}\n",
        "# Build the neural network for regression\n",
        "for i in arch:\n",
        "  for j in lr:\n",
        "    model = keras.Sequential()\n",
        "    model.add(layers.Input(shape=(X_train.shape[1],)))\n",
        "    for k in arch[i]:\n",
        "\n",
        "      model.add(layers.Dense(k, activation='relu')) # Hidden layer\n",
        "    model.add(layers.Dense(1))  # Output layer for regression (linear activation by default)\n",
        "\n",
        "    optimizer=Adam( learning_rate=j)\n",
        "    # Compile the model\n",
        "    model.compile(optimizer='adam',\n",
        "              loss='mean_squared_error',\n",
        "              metrics=['r2_score'])\n",
        "\n",
        "    #early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
        "    #callbacks=[early_stopping]\n",
        "\n",
        "\n",
        "    # Train the model\n",
        "    history=model.fit(X_train_tensor, y_train_tensor, epochs=25, batch_size=1, verbose=1,validation_data=(X_val_tensor, y_val_tensor) )\n",
        "\n",
        "    # Evaluate the model\n",
        "    loss= model.evaluate(X_test, y_test)\n",
        "    print(f\"Architecture: {i} with learning rate {j} Test Loss (MSE): {loss}\")\n",
        "\n",
        "    predictions = model.predict(X_test)\n",
        "\n",
        "    # Calculate R² score\n",
        "    r2 = r2_score(y_test, predictions)\n",
        "    print(f\"Architecture: {i} with learning rate {j} R² score: {r2}\")\n",
        "\n",
        "    from tensorflow.keras.utils import plot_model\n",
        "\n",
        "    # Save a plot of the model\n",
        "    plot_model(model, to_file=f'Architecture: {i} with learning rate {j} model.png', show_shapes=True, show_layer_names=True)\n",
        "\n",
        "    loss = history.history['loss']\n",
        "    valloss = history.history['val_loss']\n",
        "    import matplotlib.pyplot as plt\n",
        "    from matplotlib import pyplot\n",
        "    pyplot.show()\n",
        "    epochs = range(1, len(loss)+1)\n",
        "    plt.plot(epochs, loss, 'r', label='Training loss')\n",
        "    plt.plot(epochs, valloss,'b', label='Validation Loss')\n",
        "    plt.title(f\"Architecture: {i} with learning rate {j}\")\n",
        "    plt.legend()\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "FJ16QOyM1VAY",
        "outputId": "50d3d237-bb67-4c0d-b75e-4edde8537f5a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Learning Rate: 0.1\n",
            "\n",
            "Training DNN-16 with LR: 0.1\n",
            "Epoch [0/300], Training Loss: 0.5791, Validation Loss: 0.5744\n",
            "Epoch [10/300], Training Loss: 0.4083, Validation Loss: 0.5497\n",
            "Early stopping at epoch 12\n",
            "R-squared for DNN-16 with LR 0.1: 0.5378\n",
            "\n",
            "Training DNN-30-8 with LR: 0.1\n",
            "Epoch [0/300], Training Loss: 0.6392, Validation Loss: 0.5490\n",
            "Epoch [10/300], Training Loss: 0.4091, Validation Loss: 0.5123\n",
            "Early stopping at epoch 14\n",
            "R-squared for DNN-30-8 with LR 0.1: 0.5138\n",
            "\n",
            "Training DNN-30-16-8 with LR: 0.1\n",
            "Epoch [0/300], Training Loss: 0.7800, Validation Loss: 0.6508\n",
            "Epoch [10/300], Training Loss: 0.4047, Validation Loss: 0.5366\n",
            "Early stopping at epoch 11\n",
            "R-squared for DNN-30-16-8 with LR 0.1: 0.5221\n",
            "\n",
            "Training DNN-30-16-8-4 with LR: 0.1\n",
            "Epoch [0/300], Training Loss: 0.7220, Validation Loss: 0.6241\n",
            "Early stopping at epoch 9\n",
            "R-squared for DNN-30-16-8-4 with LR 0.1: 0.5185\n",
            "\n",
            "Training DNN-64-30-16-8-4 with LR: 0.1\n",
            "Epoch [0/300], Training Loss: 1.0072, Validation Loss: 1.0657\n",
            "Early stopping at epoch 8\n",
            "R-squared for DNN-64-30-16-8-4 with LR 0.1: 0.4395\n",
            "\n",
            "Learning Rate: 0.01\n",
            "\n",
            "Training DNN-16 with LR: 0.01\n",
            "Epoch [0/300], Training Loss: 0.7896, Validation Loss: 0.7175\n",
            "Epoch [10/300], Training Loss: 0.4487, Validation Loss: 0.5439\n",
            "Epoch [20/300], Training Loss: 0.4255, Validation Loss: 0.5259\n",
            "Epoch [30/300], Training Loss: 0.4399, Validation Loss: 0.5105\n",
            "Epoch [40/300], Training Loss: 0.3940, Validation Loss: 0.5075\n",
            "Early stopping at epoch 46\n",
            "R-squared for DNN-16 with LR 0.01: 0.5461\n",
            "\n",
            "Training DNN-30-8 with LR: 0.01\n",
            "Epoch [0/300], Training Loss: 1.0370, Validation Loss: 1.0099\n",
            "Epoch [10/300], Training Loss: 0.4679, Validation Loss: 0.5436\n",
            "Epoch [20/300], Training Loss: 0.4260, Validation Loss: 0.5284\n",
            "Epoch [30/300], Training Loss: 0.4046, Validation Loss: 0.5203\n",
            "Early stopping at epoch 34\n",
            "R-squared for DNN-30-8 with LR 0.01: 0.5340\n",
            "\n",
            "Training DNN-30-16-8 with LR: 0.01\n",
            "Epoch [0/300], Training Loss: 0.9641, Validation Loss: 0.9849\n",
            "Epoch [10/300], Training Loss: 0.4878, Validation Loss: 0.6044\n",
            "Epoch [20/300], Training Loss: 0.4431, Validation Loss: 0.5546\n",
            "Epoch [30/300], Training Loss: 0.4126, Validation Loss: 0.5418\n",
            "Epoch [40/300], Training Loss: 0.3981, Validation Loss: 0.5470\n",
            "Epoch [50/300], Training Loss: 0.3834, Validation Loss: 0.5331\n",
            "Early stopping at epoch 57\n",
            "R-squared for DNN-30-16-8 with LR 0.01: 0.5281\n",
            "\n",
            "Training DNN-30-16-8-4 with LR: 0.01\n",
            "Epoch [0/300], Training Loss: 1.0005, Validation Loss: 1.0330\n",
            "Epoch [10/300], Training Loss: 0.9504, Validation Loss: 0.9989\n",
            "Epoch [20/300], Training Loss: 0.5516, Validation Loss: 0.5950\n",
            "Epoch [30/300], Training Loss: 0.4627, Validation Loss: 0.5264\n",
            "Epoch [40/300], Training Loss: 0.4348, Validation Loss: 0.5169\n",
            "Early stopping at epoch 41\n",
            "R-squared for DNN-30-16-8-4 with LR 0.01: 0.5252\n",
            "\n",
            "Training DNN-64-30-16-8-4 with LR: 0.01\n",
            "Epoch [0/300], Training Loss: 0.9905, Validation Loss: 1.0229\n",
            "Epoch [10/300], Training Loss: 0.5491, Validation Loss: 0.6034\n",
            "Epoch [20/300], Training Loss: 0.4606, Validation Loss: 0.5523\n",
            "Epoch [30/300], Training Loss: 0.4248, Validation Loss: 0.5302\n",
            "Epoch [40/300], Training Loss: 0.4077, Validation Loss: 0.5251\n",
            "Early stopping at epoch 41\n",
            "R-squared for DNN-64-30-16-8-4 with LR 0.01: 0.5378\n",
            "\n",
            "Learning Rate: 0.001\n",
            "\n",
            "Training DNN-16 with LR: 0.001\n",
            "Epoch [0/300], Training Loss: 1.0511, Validation Loss: 1.0382\n",
            "Epoch [10/300], Training Loss: 0.6660, Validation Loss: 0.6750\n",
            "Epoch [20/300], Training Loss: 0.5599, Validation Loss: 0.5791\n",
            "Epoch [30/300], Training Loss: 0.5137, Validation Loss: 0.5383\n",
            "Epoch [40/300], Training Loss: 0.4785, Validation Loss: 0.5233\n",
            "Epoch [50/300], Training Loss: 0.4754, Validation Loss: 0.5185\n",
            "Epoch [60/300], Training Loss: 0.4622, Validation Loss: 0.5167\n",
            "Epoch [70/300], Training Loss: 0.4616, Validation Loss: 0.5161\n",
            "Early stopping at epoch 77\n",
            "R-squared for DNN-16 with LR 0.001: 0.5291\n",
            "\n",
            "Training DNN-30-8 with LR: 0.001\n",
            "Epoch [0/300], Training Loss: 1.0195, Validation Loss: 1.0625\n",
            "Epoch [10/300], Training Loss: 0.8572, Validation Loss: 0.8964\n",
            "Epoch [20/300], Training Loss: 0.6971, Validation Loss: 0.7381\n",
            "Epoch [30/300], Training Loss: 0.6084, Validation Loss: 0.6603\n",
            "Epoch [40/300], Training Loss: 0.5617, Validation Loss: 0.6219\n",
            "Epoch [50/300], Training Loss: 0.5353, Validation Loss: 0.6002\n",
            "Epoch [60/300], Training Loss: 0.5171, Validation Loss: 0.5869\n",
            "Epoch [70/300], Training Loss: 0.5031, Validation Loss: 0.5778\n",
            "Epoch [80/300], Training Loss: 0.5389, Validation Loss: 0.5693\n",
            "Epoch [90/300], Training Loss: 0.4871, Validation Loss: 0.5635\n",
            "Epoch [100/300], Training Loss: 0.4787, Validation Loss: 0.5590\n",
            "Epoch [110/300], Training Loss: 0.4793, Validation Loss: 0.5542\n",
            "Epoch [120/300], Training Loss: 0.4658, Validation Loss: 0.5509\n",
            "Epoch [130/300], Training Loss: 0.4613, Validation Loss: 0.5481\n",
            "Epoch [140/300], Training Loss: 0.4573, Validation Loss: 0.5453\n",
            "Epoch [150/300], Training Loss: 0.4524, Validation Loss: 0.5437\n",
            "Epoch [160/300], Training Loss: 0.4465, Validation Loss: 0.5424\n",
            "Epoch [170/300], Training Loss: 0.4492, Validation Loss: 0.5418\n",
            "Epoch [180/300], Training Loss: 0.4491, Validation Loss: 0.5408\n",
            "Epoch [190/300], Training Loss: 0.4363, Validation Loss: 0.5401\n",
            "Early stopping at epoch 193\n",
            "R-squared for DNN-30-8 with LR 0.001: 0.5132\n",
            "\n",
            "Training DNN-30-16-8 with LR: 0.001\n",
            "Epoch [0/300], Training Loss: 1.0040, Validation Loss: 1.0338\n",
            "Epoch [10/300], Training Loss: 0.8734, Validation Loss: 0.9246\n",
            "Epoch [20/300], Training Loss: 0.7576, Validation Loss: 0.8168\n",
            "Epoch [30/300], Training Loss: 0.6648, Validation Loss: 0.7260\n",
            "Epoch [40/300], Training Loss: 0.5915, Validation Loss: 0.6556\n",
            "Epoch [50/300], Training Loss: 0.5425, Validation Loss: 0.6122\n",
            "Epoch [60/300], Training Loss: 0.5157, Validation Loss: 0.5882\n",
            "Epoch [70/300], Training Loss: 0.4963, Validation Loss: 0.5751\n",
            "Epoch [80/300], Training Loss: 0.4839, Validation Loss: 0.5666\n",
            "Epoch [90/300], Training Loss: 0.4770, Validation Loss: 0.5603\n",
            "Epoch [100/300], Training Loss: 0.4675, Validation Loss: 0.5562\n",
            "Epoch [110/300], Training Loss: 0.4573, Validation Loss: 0.5518\n",
            "Epoch [120/300], Training Loss: 0.4509, Validation Loss: 0.5497\n",
            "Epoch [130/300], Training Loss: 0.4547, Validation Loss: 0.5473\n",
            "Early stopping at epoch 138\n",
            "R-squared for DNN-30-16-8 with LR 0.001: 0.5411\n",
            "\n",
            "Training DNN-30-16-8-4 with LR: 0.001\n",
            "Epoch [0/300], Training Loss: 1.0429, Validation Loss: 1.0739\n",
            "Epoch [10/300], Training Loss: 0.9848, Validation Loss: 1.0336\n",
            "Epoch [20/300], Training Loss: 0.9791, Validation Loss: 1.0330\n",
            "Epoch [30/300], Training Loss: 0.9993, Validation Loss: 1.0323\n",
            "Epoch [40/300], Training Loss: 0.9760, Validation Loss: 1.0310\n",
            "Epoch [50/300], Training Loss: 0.9857, Validation Loss: 1.0295\n",
            "Epoch [60/300], Training Loss: 0.9866, Validation Loss: 1.0275\n",
            "Epoch [70/300], Training Loss: 0.9737, Validation Loss: 1.0248\n",
            "Epoch [80/300], Training Loss: 0.9666, Validation Loss: 1.0204\n",
            "Epoch [90/300], Training Loss: 0.9580, Validation Loss: 1.0131\n",
            "Epoch [100/300], Training Loss: 0.9475, Validation Loss: 0.9982\n",
            "Epoch [110/300], Training Loss: 0.9119, Validation Loss: 0.9649\n",
            "Epoch [120/300], Training Loss: 0.8437, Validation Loss: 0.8997\n",
            "Epoch [130/300], Training Loss: 0.7648, Validation Loss: 0.8432\n",
            "Epoch [140/300], Training Loss: 0.7101, Validation Loss: 0.8033\n",
            "Epoch [150/300], Training Loss: 0.6570, Validation Loss: 0.7561\n",
            "Epoch [160/300], Training Loss: 0.6062, Validation Loss: 0.7040\n",
            "Epoch [170/300], Training Loss: 0.5597, Validation Loss: 0.6605\n",
            "Epoch [180/300], Training Loss: 0.5418, Validation Loss: 0.6335\n",
            "Epoch [190/300], Training Loss: 0.5256, Validation Loss: 0.6183\n",
            "Epoch [200/300], Training Loss: 0.5126, Validation Loss: 0.6094\n",
            "Epoch [210/300], Training Loss: 0.5103, Validation Loss: 0.6026\n",
            "Epoch [220/300], Training Loss: 0.5020, Validation Loss: 0.5974\n",
            "Epoch [230/300], Training Loss: 0.5031, Validation Loss: 0.5932\n",
            "Epoch [240/300], Training Loss: 0.4883, Validation Loss: 0.5894\n",
            "Epoch [250/300], Training Loss: 0.4821, Validation Loss: 0.5853\n",
            "Epoch [260/300], Training Loss: 0.4810, Validation Loss: 0.5827\n",
            "Epoch [270/300], Training Loss: 0.4742, Validation Loss: 0.5794\n",
            "Epoch [280/300], Training Loss: 0.4699, Validation Loss: 0.5775\n",
            "Epoch [290/300], Training Loss: 0.4861, Validation Loss: 0.5759\n",
            "Early stopping at epoch 298\n",
            "R-squared for DNN-30-16-8-4 with LR 0.001: 0.5283\n",
            "\n",
            "Training DNN-64-30-16-8-4 with LR: 0.001\n",
            "Epoch [0/300], Training Loss: 1.0388, Validation Loss: 1.1015\n",
            "Epoch [10/300], Training Loss: 0.9924, Validation Loss: 1.0397\n",
            "Epoch [20/300], Training Loss: 0.9753, Validation Loss: 1.0349\n",
            "Epoch [30/300], Training Loss: 0.9774, Validation Loss: 1.0343\n",
            "Epoch [40/300], Training Loss: 0.9881, Validation Loss: 1.0340\n",
            "Epoch [50/300], Training Loss: 0.9875, Validation Loss: 1.0338\n",
            "Epoch [60/300], Training Loss: 0.9757, Validation Loss: 1.0333\n",
            "Epoch [70/300], Training Loss: 0.9938, Validation Loss: 1.0330\n",
            "Epoch [80/300], Training Loss: 0.9928, Validation Loss: 1.0324\n",
            "Epoch [90/300], Training Loss: 0.9861, Validation Loss: 1.0316\n",
            "Epoch [100/300], Training Loss: 0.9731, Validation Loss: 1.0303\n",
            "Epoch [110/300], Training Loss: 0.9841, Validation Loss: 1.0282\n",
            "Epoch [120/300], Training Loss: 0.9796, Validation Loss: 1.0247\n",
            "Epoch [130/300], Training Loss: 0.9607, Validation Loss: 1.0184\n",
            "Epoch [140/300], Training Loss: 0.9538, Validation Loss: 1.0068\n",
            "Epoch [150/300], Training Loss: 0.9323, Validation Loss: 0.9812\n",
            "Epoch [160/300], Training Loss: 0.8761, Validation Loss: 0.9224\n",
            "Epoch [170/300], Training Loss: 0.7873, Validation Loss: 0.8220\n",
            "Epoch [180/300], Training Loss: 0.6763, Validation Loss: 0.7398\n",
            "Epoch [190/300], Training Loss: 0.6117, Validation Loss: 0.6811\n",
            "Epoch [200/300], Training Loss: 0.5613, Validation Loss: 0.6398\n",
            "Epoch [210/300], Training Loss: 0.5311, Validation Loss: 0.6114\n",
            "Epoch [220/300], Training Loss: 0.5116, Validation Loss: 0.5934\n",
            "Epoch [230/300], Training Loss: 0.5298, Validation Loss: 0.5815\n",
            "Epoch [240/300], Training Loss: 0.4909, Validation Loss: 0.5735\n",
            "Epoch [250/300], Training Loss: 0.4848, Validation Loss: 0.5672\n",
            "Epoch [260/300], Training Loss: 0.4781, Validation Loss: 0.5632\n",
            "Epoch [270/300], Training Loss: 0.4740, Validation Loss: 0.5573\n",
            "Epoch [280/300], Training Loss: 0.4683, Validation Loss: 0.5543\n",
            "Epoch [290/300], Training Loss: 0.4608, Validation Loss: 0.5500\n",
            "R-squared for DNN-64-30-16-8-4 with LR 0.001: 0.5083\n",
            "\n",
            "Learning Rate: 0.0001\n",
            "\n",
            "Training DNN-16 with LR: 0.0001\n",
            "Epoch [0/300], Training Loss: 1.2342, Validation Loss: 1.3041\n",
            "Epoch [10/300], Training Loss: 1.1148, Validation Loss: 1.1976\n",
            "Epoch [20/300], Training Loss: 1.0461, Validation Loss: 1.1083\n",
            "Epoch [30/300], Training Loss: 0.9551, Validation Loss: 1.0358\n",
            "Epoch [40/300], Training Loss: 0.8925, Validation Loss: 0.9763\n",
            "Epoch [50/300], Training Loss: 0.8473, Validation Loss: 0.9278\n",
            "Epoch [60/300], Training Loss: 0.8106, Validation Loss: 0.8884\n",
            "Epoch [70/300], Training Loss: 0.7779, Validation Loss: 0.8559\n",
            "Epoch [80/300], Training Loss: 0.7671, Validation Loss: 0.8289\n",
            "Epoch [90/300], Training Loss: 0.7241, Validation Loss: 0.8058\n",
            "Epoch [100/300], Training Loss: 0.7118, Validation Loss: 0.7858\n",
            "Epoch [110/300], Training Loss: 0.6904, Validation Loss: 0.7680\n",
            "Epoch [120/300], Training Loss: 0.6793, Validation Loss: 0.7520\n",
            "Epoch [130/300], Training Loss: 0.6549, Validation Loss: 0.7374\n",
            "Epoch [140/300], Training Loss: 0.6443, Validation Loss: 0.7240\n",
            "Epoch [150/300], Training Loss: 0.6343, Validation Loss: 0.7113\n",
            "Epoch [160/300], Training Loss: 0.6237, Validation Loss: 0.6996\n",
            "Epoch [170/300], Training Loss: 0.6049, Validation Loss: 0.6885\n",
            "Epoch [180/300], Training Loss: 0.5950, Validation Loss: 0.6781\n",
            "Epoch [190/300], Training Loss: 0.5947, Validation Loss: 0.6683\n",
            "Epoch [200/300], Training Loss: 0.5921, Validation Loss: 0.6592\n",
            "Epoch [210/300], Training Loss: 0.5761, Validation Loss: 0.6504\n",
            "Epoch [220/300], Training Loss: 0.5596, Validation Loss: 0.6421\n",
            "Epoch [230/300], Training Loss: 0.5528, Validation Loss: 0.6344\n",
            "Epoch [240/300], Training Loss: 0.5482, Validation Loss: 0.6271\n",
            "Epoch [250/300], Training Loss: 0.5448, Validation Loss: 0.6202\n",
            "Epoch [260/300], Training Loss: 0.5427, Validation Loss: 0.6141\n",
            "Epoch [270/300], Training Loss: 0.5330, Validation Loss: 0.6084\n",
            "Epoch [280/300], Training Loss: 0.5271, Validation Loss: 0.6032\n",
            "Epoch [290/300], Training Loss: 0.5197, Validation Loss: 0.5983\n",
            "R-squared for DNN-16 with LR 0.0001: 0.4922\n",
            "\n",
            "Training DNN-30-8 with LR: 0.0001\n",
            "Epoch [0/300], Training Loss: 0.9748, Validation Loss: 1.0161\n",
            "Epoch [10/300], Training Loss: 0.9553, Validation Loss: 1.0049\n",
            "Epoch [20/300], Training Loss: 0.9374, Validation Loss: 0.9930\n",
            "Epoch [30/300], Training Loss: 0.9171, Validation Loss: 0.9801\n",
            "Epoch [40/300], Training Loss: 0.9322, Validation Loss: 0.9667\n",
            "Epoch [50/300], Training Loss: 0.8888, Validation Loss: 0.9520\n",
            "Epoch [60/300], Training Loss: 0.8746, Validation Loss: 0.9351\n",
            "Epoch [70/300], Training Loss: 0.8614, Validation Loss: 0.9173\n",
            "Epoch [80/300], Training Loss: 0.8366, Validation Loss: 0.8982\n",
            "Epoch [90/300], Training Loss: 0.8135, Validation Loss: 0.8781\n",
            "Epoch [100/300], Training Loss: 0.7977, Validation Loss: 0.8578\n",
            "Epoch [110/300], Training Loss: 0.7744, Validation Loss: 0.8377\n",
            "Epoch [120/300], Training Loss: 0.7553, Validation Loss: 0.8183\n",
            "Epoch [130/300], Training Loss: 0.7346, Validation Loss: 0.7999\n",
            "Epoch [140/300], Training Loss: 0.7298, Validation Loss: 0.7826\n",
            "Epoch [150/300], Training Loss: 0.6956, Validation Loss: 0.7665\n",
            "Epoch [160/300], Training Loss: 0.6824, Validation Loss: 0.7517\n",
            "Epoch [170/300], Training Loss: 0.6655, Validation Loss: 0.7381\n",
            "Epoch [180/300], Training Loss: 0.6580, Validation Loss: 0.7259\n",
            "Epoch [190/300], Training Loss: 0.6342, Validation Loss: 0.7150\n",
            "Epoch [200/300], Training Loss: 0.6248, Validation Loss: 0.7053\n",
            "Epoch [210/300], Training Loss: 0.6381, Validation Loss: 0.6965\n",
            "Epoch [220/300], Training Loss: 0.6089, Validation Loss: 0.6886\n",
            "Epoch [230/300], Training Loss: 0.5946, Validation Loss: 0.6815\n",
            "Epoch [240/300], Training Loss: 0.5918, Validation Loss: 0.6749\n",
            "Epoch [250/300], Training Loss: 0.5723, Validation Loss: 0.6686\n",
            "Epoch [260/300], Training Loss: 0.5650, Validation Loss: 0.6628\n",
            "Epoch [270/300], Training Loss: 0.5613, Validation Loss: 0.6575\n",
            "Epoch [280/300], Training Loss: 0.5544, Validation Loss: 0.6525\n",
            "Epoch [290/300], Training Loss: 0.5491, Validation Loss: 0.6479\n",
            "R-squared for DNN-30-8 with LR 0.0001: 0.4451\n",
            "\n",
            "Training DNN-30-16-8 with LR: 0.0001\n",
            "Epoch [0/300], Training Loss: 1.0229, Validation Loss: 1.0667\n",
            "Epoch [10/300], Training Loss: 1.0006, Validation Loss: 1.0556\n",
            "Epoch [20/300], Training Loss: 1.0003, Validation Loss: 1.0468\n",
            "Epoch [30/300], Training Loss: 0.9897, Validation Loss: 1.0392\n",
            "Epoch [40/300], Training Loss: 0.9851, Validation Loss: 1.0326\n",
            "Epoch [50/300], Training Loss: 0.9809, Validation Loss: 1.0264\n",
            "Epoch [60/300], Training Loss: 0.9695, Validation Loss: 1.0206\n",
            "Epoch [70/300], Training Loss: 0.9693, Validation Loss: 1.0146\n",
            "Epoch [80/300], Training Loss: 0.9628, Validation Loss: 1.0085\n",
            "Epoch [90/300], Training Loss: 0.9629, Validation Loss: 1.0024\n",
            "Epoch [100/300], Training Loss: 0.9492, Validation Loss: 0.9961\n",
            "Epoch [110/300], Training Loss: 0.9472, Validation Loss: 0.9894\n",
            "Epoch [120/300], Training Loss: 0.9400, Validation Loss: 0.9824\n",
            "Epoch [130/300], Training Loss: 1.0336, Validation Loss: 0.9751\n",
            "Epoch [140/300], Training Loss: 0.9331, Validation Loss: 0.9674\n",
            "Epoch [150/300], Training Loss: 0.9234, Validation Loss: 0.9596\n",
            "Epoch [160/300], Training Loss: 0.9183, Validation Loss: 0.9515\n",
            "Epoch [170/300], Training Loss: 0.9072, Validation Loss: 0.9431\n",
            "Epoch [180/300], Training Loss: 0.9044, Validation Loss: 0.9344\n",
            "Epoch [190/300], Training Loss: 0.8899, Validation Loss: 0.9255\n",
            "Epoch [200/300], Training Loss: 0.8830, Validation Loss: 0.9163\n",
            "Epoch [210/300], Training Loss: 0.8852, Validation Loss: 0.9066\n",
            "Epoch [220/300], Training Loss: 0.8829, Validation Loss: 0.8966\n",
            "Epoch [230/300], Training Loss: 0.8610, Validation Loss: 0.8864\n",
            "Epoch [240/300], Training Loss: 0.8492, Validation Loss: 0.8760\n",
            "Epoch [250/300], Training Loss: 0.8397, Validation Loss: 0.8654\n",
            "Epoch [260/300], Training Loss: 0.8352, Validation Loss: 0.8545\n",
            "Epoch [270/300], Training Loss: 0.8280, Validation Loss: 0.8435\n",
            "Epoch [280/300], Training Loss: 0.8199, Validation Loss: 0.8325\n",
            "Epoch [290/300], Training Loss: 0.8308, Validation Loss: 0.8215\n",
            "R-squared for DNN-30-16-8 with LR 0.0001: 0.2229\n",
            "\n",
            "Training DNN-30-16-8-4 with LR: 0.0001\n",
            "Epoch [0/300], Training Loss: 1.2935, Validation Loss: 1.2925\n",
            "Epoch [10/300], Training Loss: 1.2053, Validation Loss: 1.2180\n",
            "Epoch [20/300], Training Loss: 1.1461, Validation Loss: 1.1611\n",
            "Epoch [30/300], Training Loss: 1.1055, Validation Loss: 1.1194\n",
            "Epoch [40/300], Training Loss: 1.0552, Validation Loss: 1.0901\n",
            "Epoch [50/300], Training Loss: 1.0318, Validation Loss: 1.0694\n",
            "Epoch [60/300], Training Loss: 1.0257, Validation Loss: 1.0549\n",
            "Epoch [70/300], Training Loss: 1.0080, Validation Loss: 1.0450\n",
            "Epoch [80/300], Training Loss: 1.0039, Validation Loss: 1.0381\n",
            "Epoch [90/300], Training Loss: 0.9917, Validation Loss: 1.0335\n",
            "Epoch [100/300], Training Loss: 0.9839, Validation Loss: 1.0302\n",
            "Epoch [110/300], Training Loss: 0.9843, Validation Loss: 1.0281\n",
            "Epoch [120/300], Training Loss: 0.9763, Validation Loss: 1.0266\n",
            "Epoch [130/300], Training Loss: 0.9740, Validation Loss: 1.0256\n",
            "Epoch [140/300], Training Loss: 0.9751, Validation Loss: 1.0249\n",
            "Epoch [150/300], Training Loss: 0.9894, Validation Loss: 1.0244\n",
            "Epoch [160/300], Training Loss: 0.9731, Validation Loss: 1.0240\n",
            "Epoch [170/300], Training Loss: 0.9708, Validation Loss: 1.0237\n",
            "Epoch [180/300], Training Loss: 0.9882, Validation Loss: 1.0233\n",
            "Epoch [190/300], Training Loss: 0.9966, Validation Loss: 1.0231\n",
            "Epoch [200/300], Training Loss: 0.9692, Validation Loss: 1.0228\n",
            "Epoch [210/300], Training Loss: 0.9814, Validation Loss: 1.0225\n",
            "Epoch [220/300], Training Loss: 0.9697, Validation Loss: 1.0221\n",
            "Epoch [230/300], Training Loss: 0.9741, Validation Loss: 1.0218\n",
            "Epoch [240/300], Training Loss: 0.9751, Validation Loss: 1.0214\n",
            "Epoch [250/300], Training Loss: 0.9697, Validation Loss: 1.0210\n",
            "Epoch [260/300], Training Loss: 0.9765, Validation Loss: 1.0205\n",
            "Epoch [270/300], Training Loss: 0.9710, Validation Loss: 1.0200\n",
            "Epoch [280/300], Training Loss: 0.9737, Validation Loss: 1.0195\n",
            "Epoch [290/300], Training Loss: 0.9645, Validation Loss: 1.0190\n",
            "R-squared for DNN-30-16-8-4 with LR 0.0001: 0.0154\n",
            "\n",
            "Training DNN-64-30-16-8-4 with LR: 0.0001\n",
            "Epoch [0/300], Training Loss: 1.0449, Validation Loss: 1.0833\n",
            "Epoch [10/300], Training Loss: 1.0376, Validation Loss: 1.0647\n",
            "Epoch [20/300], Training Loss: 1.0080, Validation Loss: 1.0522\n",
            "Epoch [30/300], Training Loss: 1.0037, Validation Loss: 1.0440\n",
            "Epoch [40/300], Training Loss: 0.9883, Validation Loss: 1.0387\n",
            "Epoch [50/300], Training Loss: 0.9939, Validation Loss: 1.0355\n",
            "Epoch [60/300], Training Loss: 1.0054, Validation Loss: 1.0335\n",
            "Epoch [70/300], Training Loss: 0.9977, Validation Loss: 1.0323\n",
            "Epoch [80/300], Training Loss: 0.9772, Validation Loss: 1.0316\n",
            "Epoch [90/300], Training Loss: 0.9934, Validation Loss: 1.0312\n",
            "Epoch [100/300], Training Loss: 0.9842, Validation Loss: 1.0310\n",
            "Epoch [110/300], Training Loss: 0.9851, Validation Loss: 1.0309\n",
            "Epoch [120/300], Training Loss: 0.9789, Validation Loss: 1.0308\n",
            "Epoch [130/300], Training Loss: 0.9803, Validation Loss: 1.0308\n",
            "Epoch [140/300], Training Loss: 0.9727, Validation Loss: 1.0307\n",
            "Epoch [150/300], Training Loss: 0.9747, Validation Loss: 1.0307\n",
            "Epoch [160/300], Training Loss: 0.9733, Validation Loss: 1.0306\n",
            "Epoch [170/300], Training Loss: 0.9782, Validation Loss: 1.0305\n",
            "Epoch [180/300], Training Loss: 0.9859, Validation Loss: 1.0304\n",
            "Epoch [190/300], Training Loss: 0.9787, Validation Loss: 1.0302\n",
            "Epoch [200/300], Training Loss: 0.9835, Validation Loss: 1.0301\n",
            "Epoch [210/300], Training Loss: 0.9819, Validation Loss: 1.0299\n",
            "Epoch [220/300], Training Loss: 0.9745, Validation Loss: 1.0297\n",
            "Epoch [230/300], Training Loss: 0.9821, Validation Loss: 1.0296\n",
            "Epoch [240/300], Training Loss: 0.9761, Validation Loss: 1.0293\n",
            "Epoch [250/300], Training Loss: 0.9858, Validation Loss: 1.0291\n",
            "Epoch [260/300], Training Loss: 0.9709, Validation Loss: 1.0289\n",
            "Epoch [270/300], Training Loss: 0.9790, Validation Loss: 1.0287\n",
            "Epoch [280/300], Training Loss: 0.9935, Validation Loss: 1.0284\n",
            "Epoch [290/300], Training Loss: 0.9794, Validation Loss: 1.0282\n",
            "R-squared for DNN-64-30-16-8-4 with LR 0.0001: 0.0063\n",
            "\n",
            "Final Results:\n",
            "Model                LR: 0.1 (R^2)        LR: 0.01 (R^2)       LR: 0.001 (R^2)      LR: 0.0001 (R^2)    \n",
            "DNN-16               0.5378376643716094   0.5461283532657448   0.5290528585016566   0.4921967858306634  \n",
            "DNN-30-8             0.5137762343981251   0.53397727532652     0.5131850879871223   0.44508861752775664 \n",
            "DNN-30-16-8          0.5221178321938292   0.5281389955136975   0.5410761434282174   0.2228862587629209  \n",
            "DNN-30-16-8-4        0.5184546917637232   0.5251825039590376   0.5283248600450321   0.015374570823434741\n",
            "DNN-64-30-16-8-4     0.43947406909902753  0.5378189985038775   0.5082753055295965   0.006295476253882826\n"
          ]
        }
      ],
      "source": [
        "# Step 3: Define the DNN model with multiple architectures\n",
        "class DNN(nn.Module):\n",
        "    def __init__(self, layers):\n",
        "        super(DNN, self).__init__()\n",
        "        self.layers = nn.ModuleList()\n",
        "        for i in range(len(layers) - 1):\n",
        "            self.layers.append(nn.Linear(layers[i], layers[i + 1]))\n",
        "\n",
        "    def forward(self, x):\n",
        "        for layer in self.layers[:-1]:\n",
        "            x = torch.relu(layer(x))\n",
        "        x = self.layers[-1](x)\n",
        "        return x\n",
        "\n",
        "# R-squared calculation with error handling\n",
        "def calculate_r2(model, X, y):\n",
        "    try:\n",
        "        model.eval()\n",
        "        with torch.no_grad():\n",
        "            predictions = model(X)\n",
        "            if torch.isnan(predictions).any() or torch.isinf(predictions).any():\n",
        "                raise ValueError(\"NaN or inf values encountered in predictions.\")\n",
        "            r2 = r2_score(y.cpu().numpy(), predictions.cpu().numpy())\n",
        "        return r2\n",
        "    except Exception as e:\n",
        "        print(f\"Error calculating R-squared: {e}\")\n",
        "        return np.nan  # Return NaN if any error occurs\n",
        "\n",
        "# Training with early stopping and gradient clipping\n",
        "def train_model(model, criterion, optimizer, train_loader, val_loader, epochs=100, patience=5, max_norm=1.0):\n",
        "    val_loss_history = []\n",
        "    for epoch in range(epochs):\n",
        "        model.train()\n",
        "        running_loss = 0.0\n",
        "        for X_batch, y_batch in train_loader:\n",
        "            optimizer.zero_grad()\n",
        "            y_pred = model(X_batch)\n",
        "            loss = criterion(y_pred, y_batch)\n",
        "            loss.backward()\n",
        "\n",
        "            # Gradient clipping to avoid exploding gradients\n",
        "            torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm)\n",
        "\n",
        "            optimizer.step()\n",
        "            running_loss += loss.item()\n",
        "\n",
        "        # Validation\n",
        "        model.eval()\n",
        "        val_loss = 0.0\n",
        "        with torch.no_grad():\n",
        "            for X_val_batch, y_val_batch in val_loader:\n",
        "                val_pred = model(X_val_batch)\n",
        "                loss_val = criterion(val_pred, y_val_batch)\n",
        "                val_loss += loss_val.item()\n",
        "\n",
        "        val_loss_history.append(val_loss/len(val_loader))\n",
        "        if epoch % 10 == 0:\n",
        "            print(f'Epoch [{epoch}/{epochs}], Training Loss: {running_loss/len(train_loader):.4f}, Validation Loss: {val_loss/len(val_loader):.4f}')\n",
        "        if early_stopping(val_loss_history, patience):\n",
        "            print(f\"Early stopping at epoch {epoch}\")\n",
        "            break\n",
        "\n",
        "# Early stopping function\n",
        "def early_stopping(val_loss_history, patience=5):\n",
        "    if len(val_loss_history) > patience:\n",
        "        if min(val_loss_history[-patience:]) > min(val_loss_history[:-patience]):\n",
        "            return True\n",
        "    return False\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "def evaluate_model(model, X_test, y_test):\n",
        "    model.eval()\n",
        "    with torch.no_grad():\n",
        "        try:\n",
        "            predictions = model(X_test)\n",
        "            if torch.isnan(predictions).any() or torch.isinf(predictions).any():\n",
        "                raise ValueError(\"NaN or inf values encountered in predictions.\")\n",
        "            test_loss = criterion(predictions, y_test)\n",
        "            return calculate_r2(model, X_test, y_test)\n",
        "        except Exception as e:\n",
        "            print(f\"Error during evaluation: {e}\")\n",
        "            return np.nan  # Return NaN if there is any error\n",
        "\n",
        "# Step 4: Define the loss function (Mean Squared Error) and optimizer (Stochastic Gradient Descent)\n",
        "criterion = nn.MSELoss()\n",
        "\n",
        "# Step 5: Run the experiment for different learning rates and architectures\n",
        "learning_rates = [0.1, 0.01, 0.001, 0.0001]  # Including higher learning rate 0.1 again\n",
        "architectures = {\n",
        "    \"DNN-16\": [X_train.shape[1], 30, 1],\n",
        "    \"DNN-30-8\": [X_train.shape[1], 30, 8, 1],\n",
        "    \"DNN-30-16-8\": [X_train.shape[1], 30, 16, 8, 1],\n",
        "    \"DNN-30-16-8-4\": [X_train.shape[1], 30, 16, 8, 4, 1],\n",
        "    \"DNN-64-30-16-8-4\": [X_train.shape[1],64, 30, 16, 8, 4, 1]\n",
        "}\n",
        "\n",
        "results = {}\n",
        "\n",
        "for lr in learning_rates:\n",
        "    print(f\"\\nLearning Rate: {lr}\")\n",
        "    for name, layers in architectures.items():\n",
        "        print(f\"\\nTraining {name} with LR: {lr}\")\n",
        "        model = DNN(layers)\n",
        "        optimizer = optim.SGD(model.parameters(), lr=lr)\n",
        "        train_model(model, criterion, optimizer, train_loader, val_loader, epochs=300, patience=5)\n",
        "        r2 = evaluate_model(model, X_test_tensor, y_test_tensor)\n",
        "        print(f\"R-squared for {name} with LR {lr}: {r2:.4f}\")\n",
        "\n",
        "        # Store the results for the table\n",
        "        if name not in results:\n",
        "            results[name] = {}\n",
        "        results[name][f\"LR: {lr}\"] = r2\n",
        "\n",
        "# Print results in table format\n",
        "print(\"\\nFinal Results:\")\n",
        "print(f\"{'Model':<20} {'LR: 0.1 (R^2)':<20} {'LR: 0.01 (R^2)':<20} {'LR: 0.001 (R^2)':<20} {'LR: 0.0001 (R^2)':<20}\")\n",
        "for name, res in results.items():\n",
        "    print(f\"{name:<20} {res.get('LR: 0.1', 'N/A'):<20} {res.get('LR: 0.01', 'N/A'):<20} {res.get('LR: 0.001', 'N/A'):<20} {res.get('LR: 0.0001', 'N/A'):<20}\")\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyOgYP6GoBJOzZH3AhwMBqLr",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}